{
    "data": {
        "attributes": {
            "deffile": "BootStrap: docker\nFrom:  ubuntu:16.04\n\n  ####\n%setup\n  ####\n  # initial setups from outside the container\n  # this is run from outside the container to start setting it up\n\n  echo \"Looking in directory '$SINGULARITY_ROOTFS' for /bin/sh\"\n  if [ ! -x \"$SINGULARITY_ROOTFS/bin/sh\" ]; then\n      echo \"Hrmm, this container does not have /bin/sh installed...\"\n      exit 1\n  fi\n\n\n  # for SDSC mounts\n  mkdir -p $SINGULARITY_ROOTFS/oasis/tscc/scratch\n  mkdir -p $SINGULARITY_ROOTFS/projects/ps-yeolab\n  mkdir -p $SINGULARITY_ROOTFS/projects/ps-yeolab3\n  mkdir -p $SINGULARITY_ROOTFS/projects/ps-scrm\n  mkdir -p $SINGULARITY_ROOTFS/oasis/projects/nsf\n\n  # for Cincinnati Chidren's Hospital mounts\n  mkdir -p $SINGULARITY_ROOTFS/users\n  mkdir -p $SINGULARITY_ROOTFS/data\n  mkdir -p $SINGULARITY_ROOTFS/scratch\n\n  # for West Virginia University mounts\n  mkdir -p $SINGULARITY_ROOTFS/users\n  mkdir -p $SINGULARITY_ROOTFS/gpfs\n  mkdir -p $SINGULARITY_ROOTFS/groups\n\n  # for Alain's laptop\n  mkdir -p $SINGULARITY_ROOTFS/media/mis\n\n\n  mkdir -p $SINGULARITY_ROOTFS/opt/condaenvexports\n  mkdir -p $SINGULARITY_ROOTFS/opt/donewith\n\n  mkdir -p $SINGULARITY_ROOTFS/opt/reference\n  mkdir -p $SINGULARITY_ROOTFS/opt/dataset\n  mkdir -p $SINGULARITY_ROOTFS/opt/template\n\n  mkdir -p $SINGULARITY_ROOTFS/opt/members\n  mkdir -p $SINGULARITY_ROOTFS/opt/patches\n\n  mkdir -p $SINGULARITY_ROOTFS/opt/bin\n  mkdir -p $SINGULARITY_ROOTFS/opt/cwl\n  mkdir -p $SINGULARITY_ROOTFS/opt/wf\n\n\n  # these are needed early for post section - not really ?\n\n cp -r ./reference/* $SINGULARITY_ROOTFS/opt/reference/\n cp -r ./dataset/* $SINGULARITY_ROOTFS/opt/dataset/\n cp -r ./template/* $SINGULARITY_ROOTFS/opt/template/\n\n  cp -r ./members/*  $SINGULARITY_ROOTFS/opt/members/\n  cp -r ./patches/*  $SINGULARITY_ROOTFS/opt/patches/\n\n  cp -r ./bin/*  $SINGULARITY_ROOTFS/opt/bin/\n  cp -r ./cwl/*  $SINGULARITY_ROOTFS/opt/cwl/\n  cp -r ./wf/*  $SINGULARITY_ROOTFS/opt/wf/\n\n\n  # will be downloading from google cloud\n  # unless if file is present for local laptop build\n  if [ -f ./downloads/cellranger-2.0.2.tar.gz ]\n  then\n      cp   ./downloads/cellranger-2.0.2.tar.gz $SINGULARITY_ROOTFS/opt/\n  fi\n  if [ -f ./downloads/bcl2fastq2-v2-20-0-tar.zip ]\n  then\n      cp   ./downloads/bcl2fastq2-v2-20-0-tar.zip $SINGULARITY_ROOTFS/opt/\n  fi\n\n  # TODO\n  # cp refdata/refdata-cellranger-ercc92-1.2.0.tar.gz $SINGULARITY_ROOTFS/opt/\n\n\n  ###\n%post\n  ###\n  # running post scriptlet\n  # this is run inside the container to install all necessary packages\n\n  # set -o xtrace\n  set -o nounset\n  set -o errexit\n  # set -o pipefail\n\n\n  ########\n  # UBUNTU\n\n  # ubuntu does not have bash in /usr/bin/env ??\n  ln -s /bin/bash /usr/bin/bash\n\n  apt-get -y update\n  apt-get -y install nano unzip zip\n  # apt-get -y install make gcc g++ zlib1g-dev libncurses5-dev nano unzip zip\n  # apt-get install -y xorg\n  # g++ --version\n\n  # cleanup   x? M\n  apt-get clean\n\n\n  # fix for /bin/gtar: not found when running devtools::install_git()\n  ln -s /bin/tar /bin/gtar\n\n  echo\n  touch /opt/donewith/ubuntu\n  echo \"-----------------------------------------------\"\n\n\n  ###########\n  # MINICONDA\n  #\n  # instead of having: From: continuumio/miniconda:4.3.11\n  # from https://hub.docker.com/r/continuumio/miniconda/~/dockerfile/\n\n  # ENV LANG=C.UTF-8 LC_ALL=C.UTF-8\n\n  apt-get update --fix-missing\n\n  apt-get install -y wget bzip2 ca-certificates \\\n    libglib2.0-0 libxext6 libsm6 libxrender1 \\\n    git mercurial subversion\n\n  #echo 'export PATH=/opt/conda/bin:$PATH' > /etc/profile.d/conda.sh\n\n  # py2\n  # wget --quiet https://repo.continuum.io/miniconda/Miniconda2-4.3.14-Linux-x86_64.sh -O ~/miniconda.sh\n  # py3\n  wget --quiet https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh\n\n  /bin/bash ~/miniconda.sh -b -p /opt/conda\n  rm ~/miniconda.sh\n\n  #apt-get install -y curl grep sed dpkg\n  #TINI_VERSION=`curl https://github.com/krallin/tini/releases/latest | grep -o \"/v.*\\\"\" | sed 's:^..\\(.*\\).$:\\1:'`\n  #curl -L \"https://github.com/krallin/tini/releases/download/v${TINI_VERSION}/tini_${TINI_VERSION}.deb\" > tini.deb\n  #dpkg -i tini.deb\n  #rm tini.deb\n  #apt-get clean\n\n  #ENV PATH /opt/conda/bin:$PATH\n  #ENTRYPOINT [ \"/usr/bin/tini\", \"--\" ]\n  #CMD [ \"/bin/bash\" ]\n\n  # this is required here as the environment section is not processed yet\n  PATH=/opt/conda/bin:$PATH\n  export PATH\n\n  echo\n  touch /opt/donewith/miniconda\n  echo \"-----------------------------------------------\"\n\n  /opt/conda/bin/conda install -y -c conda-forge \\\n      python=3.6.1 setuptools=36.3.0 nodejs=6.11.0 openpyxl=2.4.8 pandas=0.20.3\n  /opt/conda/bin/pip install --upgrade pip\n  /opt/conda/bin/pip install cwltool==1.0.20170828135420\n  /opt/conda/bin/conda env export -n root > /opt/condaenvexports/root-0.0.1.yaml\n\n  echo\n  touch /opt/donewith/rootenv\n  echo \"-----------------------------------------------\"\n\n\n#  ###########\n#  # JUPYTER\n#  #\n#  # jupyter=1.0.0\n#  echo \"-----------------------------------------------\"\n#  NAME=jupyternotebook\n#  VERSION=5.0.0\n#  echo \"-----------------------------------------------\"\n#  conda create --yes -n jupyternotebook python=3.6.2 notebook=5.0.0\n#  conda env export -n jupyternotebook > /opt/condaenvexports/jupyternotebook-5.0.0.yaml\n#  PATH=\"/opt/conda/envs/jupyternotebook/bin:$PATH\"\n#  export PATH\n#  JUPYTER_PATH=/opt/conda/envs/jupyternotebook/share/jupyter\n#  export JUPYTER_PATH\n#  KERNELS=${JUPYTER_PATH}/kernels\n#  export KERNELS\n#  mkdir -p $KERNELS\n#  echo\n#  touch /opt/donewith/jupyternotebook\n#  echo \"-----------------------------------------------\"\n#  echo\n#  touch /opt/donewith/members_envs\n#  echo \"-----------------------------------------------\"\n\n  ######\n  # node\n  # conda install -c conda-forge nodejs\n\n  ##########\n  # openpyxl\n\n  # conda create -n openpyxl-2.4.8 python=3.5 openpyxl=2.4.8\n  # source activate openpyxl-2.4.8\n  # conda env export > ~/eclipcondainstall/condaenv_openpyxl-2.4.8_0.yaml\n\n  # conda install pandas=0.20.3\n  # conda env export > ~/eclipcondainstall/condaenv_openpyxl-2.4.8_1.yaml\n\n\n  ##########\n  # cwltool\n\n  # sourceactivateroot\n  # conda create -n cwltool-1.0.20170525215327 python=2.7\n  # source activate cwltool-1.0.20170525215327\n  # conda env export > ~/eclipcondainstall/condaenv_cwltool-1.0.20170525215327_0.yaml\n\n  # pip install cwltool\n\n  ### Successfully installed\n  #CacheControl-0.11.7 avro-1.8.2 certifi-2017.4.17 chardet-3.0.4\n  #cwltool-1.0.20170525215327 idna-2.5 isodate-0.5.4 lockfile-0.12.2\n  #mistune-0.7.4 pyparsing-2.2.0 rdflib-4.2.2 rdflib-jsonld-0.4.0\n  #requests-2.18.1 ruamel.ordereddict-0.4.9 ruamel.yaml-0.15.9\n  #schema-salad-2.5.20170428142041 shellescape-3.4.1 six-1.10.0\n  #typing-3.5.3.0 urllib3-1.21.1\n\n\n  # conda install setuptools\n  # pip install --upgrade pip\n  # pip uninstall cwltool\n  # pip install cwltool\n\n\n\n\n  ############\n  # CELLRANGER\n  #\n  cd /opt\n  # 10x genomics website links expires quickly\n  # wget -O cellranger-2.0.2.tar.gz \"http://cf.10xgenomics.com/releases/cell-exp/cellranger-2.0.2.tar.gz?Expires=1505243477&Policy=eyJTdGF0ZW1lbnQiOlt7IlJlc291cmNlIjoiaHR0cDovL2NmLjEweGdlbm9taWNzLmNvbS9yZWxlYXNlcy9jZWxsLWV4cC9jZWxscmFuZ2VyLTIuMC4yLnRhci5neiIsIkNvbmRpdGlvbiI6eyJEYXRlTGVzc1RoYW4iOnsiQVdTOkVwb2NoVGltZSI6MTUwNTI0MzQ3N319fV19&Signature=m9aA~g6TX18pk-EuoUMSYyBbWzTpdq737D7MZ6HfyucRBTnwo84kFgU5UOCDUMrNUoI7AGL35mjKQm34~~Mzy~knhpe1IcawIRcjUqx3vqDdrpZNIpGaLS6-znlr6MExSGz5UtS6BeBdWsTb4lwWlqO0~Tu~AcNH3BJ-n88Mi1EBiYrzdYTFYyLsJUsd~0h~l6RIu9PdYCBR6as4ImtExOTtpomx2QdWVuY3Rrb7MwGxjfyQA~s4st8FhsDGZnEkKqij0LR5AcC6cfeWL6lZ2J6ei2eGL35lLBYDdWDC~uO011mqlAoozyTT3UUq4CQ5Nx42FZujxRUsYr~TPC7s8Q__&Key-Pair-Id=APKAI7S6A5RYOXBWRPDA\"\n  # using alternative download from google cloud\n  if [ ! -f  /opt/cellranger-2.0.2.tar.gz ]\n  then\n      wget -O cellranger-2.0.2.tar.gz \"https://storage.googleapis.com/singularity-cellranger/cellranger-2.0.2.tar.gz\"\n  fi\n  tar -xzf cellranger-2.0.2.tar.gz\n  mv cellranger-2.0.2 10x\n  rm cellranger-2.0.2.tar.gz\n  # # ln -s /opt/cellranger-2.0.0/cellranger-tiny-ref/1.2.0   /opt/cellranger_refdata/refdata-cellranger-tiny-ref-1.2.0\n  # # wget http://cf.10xgenomics.com/supp/cell-exp/chromium-shared-sample-indexes-plate.json\n  # # wget http://cf.10xgenomics.com/supp/cell-exp/chromium-shared-sample-indexes-plate.csv\n  cd -\n  echo\n  touch /opt/donewith/cellranger\n  echo \"-----------------------------------------------\"\n\n  ############\n  # BCL2FASTQ2\n  #\n  cd /opt\n  if [ ! -f  bcl2fastq2-v2-20-0-tar.zip ]\n  then\n      wget ftp://webdata2:webdata2@ussd-ftp.illumina.com/downloads/software/bcl2fastq/bcl2fastq2-v2-20-0-tar.zip\n  fi\n  unzip bcl2fastq2-v2-20-0-tar.zip\n  rm bcl2fastq2-v2-20-0-tar.zip\n  cd -\n  echo\n  touch /opt/donewith/bcl2fastq2\n  echo \"-----------------------------------------------\"\n\n\n\n  /opt/conda/bin/conda env export -n root > /opt/condaenvexports/root_$(date +%Y-%m-%d-%H-%M).yaml\n\n  # cleanup 454 MB\n  /opt/conda/bin/conda clean --index-cache --tarballs --packages --yes\n\n  #chmod --recursive --changes +755 /opt/*\n  chmod --recursive +755 /opt/*\n\n  echo\n  touch /opt/donewith/condaenvexportroot_condaclean_chmod\n  echo \"-----------------------------------------------\"\n\n  set +x\n\n\n  ##########\n%environment\n  ##########\n\n  #PATH=/opt/conda/bin:/usr/local/bin:/usr/bin:/bin\n  PATH=/opt/conda/bin:$PATH\n  # PATH=/opt/conda/envs/cellranger-2.0.2/bin:$PATH\n  PATH=/opt/10x:$PATH\n  PATH=/opt/bin:$PATH\n  PATH=/opt/cwl:$PATH\n  PATH=/opt/wf:$PATH\n  PATH=/opt/members/cellrangerget:$PATH\n  export PATH\n\n  # HOSTIP=$(hostname -i)\n  # export HOSTIP\n  # JUPYTER_PATH=/opt/conda/envs/jupyternotebook/share/jupyter\n  # export JUPYTER_PATH\n  # KERNELS=${JUPYTER_PATH}/kernels\n  # export KERNELS\n\n  alias echopathtr='echo $PATH | tr \":\" \"\\n\"'\n  alias ll='ls -lhF'\n\n  #CELLRANGER_HOME=/opt/\n  CELLRANGER_REPO=/opt/\n  export CELLRANGER_REPO\n\n  CELLRANGER_TEMPLATE=/opt/template\n  export CELLRANGER_TEMPLATE\n\n  ######\n%labels\n  ######\n  #\n  MAINTAINER alaindomissy@gmail.com\n  VERSION 2.0.2\n  BUILD_DATE \"${date -Iminutes}\"\n\n\n  ####\n%files\n  ####\n  # TODO permissions will nbe 700 !\n  # documentation      /opt/\n  # tests              /opt/\n\n\n  ########\n%runscript\n  ########\n  # this will get copied to /.singularity.d/runscript indide the container\n  # which will run whenever the container is called as an executable\n\n  echo\n  echo Container image downloaded, now setting shortcuts\n  echo -------------------------------------------------\n\n  #set -o xtrace\n  set -o nounset\n  #set -o errexit\n  #set -o pipefail\n\n  if [ $# -eq 0 ]\n  then\n    IDATE=$(date -Iseconds)\n    # IDATE=$(date -Iseconds | tr \"\\:\" \"-\" | tr \"T\" \"+\")\n\n    IMAGENAME=cellranger_${IDATE}_${SINGULARITY_NAME}\n    mv ${SINGULARITY_NAME} ${IMAGENAME}\n    ln -sf ${IMAGENAME} cellranger.img\n\n\n    # cp -r /opt/conda/envs/jupyternotebook/share/jupyter/kernels   ./\n    cp /opt/patches/scripts/*   ./\n\n\n    ln -sf cellranger cellrangercwl\n    ln -sf cellranger cellrangergetreference\n    ln -sf cellranger cellrangergetdataset\n\n    echo\n    echo \"====================================================================\"\n    echo \"to complete this installation, please type:\"\n    echo\n    echo \"                     source SOURCEME                                \"\n    echo\n    echo \"then, enjoy cellranger !\"\n    echo \"====================================================================\"\n    echo\n\n    # scbatch_notebook\n\n  else\n      echo \"cellranger image called with run and some arguments - did you mean to exec instead ?\"\n  fi\n\n  ####\n%test\n  ####\n\n  # /opt/tests/test\n",
            "help": null,
            "labels": {
                "BUILD_DATE": "\"${date -Iminutes}\"",
                "org.label-schema.usage.singularity.deffile.bootstrap": "docker",
                "MAINTAINER": "alaindomissy@gmail.com",
                "org.label-schema.usage.singularity.deffile": "Singularity",
                "org.label-schema.schema-version": "1.0",
                "VERSION": "2.0.2",
                "org.label-schema.usage.singularity.deffile.from": "ubuntu:16.04",
                "org.label-schema.build-date": "2017-10-15T18:20:03+00:00",
                "org.label-schema.usage.singularity.version": "2.4-feature-squashbuild-secbuild.g780c84d",
                "org.label-schema.build-size": "3517MB"
            },
            "environment": "# Custom environment shell code should follow\n\n  ##########\n\n  #PATH=/opt/conda/bin:/usr/local/bin:/usr/bin:/bin\n  PATH=/opt/conda/bin:$PATH\n  # PATH=/opt/conda/envs/cellranger-2.0.2/bin:$PATH\n  PATH=/opt/10x:$PATH\n  PATH=/opt/bin:$PATH\n  PATH=/opt/cwl:$PATH\n  PATH=/opt/wf:$PATH\n  PATH=/opt/members/cellrangerget:$PATH\n  export PATH\n\n  # HOSTIP=$(hostname -i)\n  # export HOSTIP\n  # JUPYTER_PATH=/opt/conda/envs/jupyternotebook/share/jupyter\n  # export JUPYTER_PATH\n  # KERNELS=${JUPYTER_PATH}/kernels\n  # export KERNELS\n\n  alias echopathtr='echo $PATH | tr \":\" \"\\n\"'\n  alias ll='ls -lhF'\n\n  #CELLRANGER_HOME=/opt/\n  CELLRANGER_REPO=/opt/\n  export CELLRANGER_REPO\n\n  CELLRANGER_TEMPLATE=/opt/template\n  export CELLRANGER_TEMPLATE\n\n  ######\n",
            "runscript": "#!/bin/sh \n\n  ########\n  # this will get copied to /.singularity.d/runscript indide the container\n  # which will run whenever the container is called as an executable\n\n  echo\n  echo Container image downloaded, now setting shortcuts\n  echo -------------------------------------------------\n\n  #set -o xtrace\n  set -o nounset\n  #set -o errexit\n  #set -o pipefail\n\n  if [ $# -eq 0 ]\n  then\n    IDATE=$(date -Iseconds)\n    # IDATE=$(date -Iseconds | tr \"\\:\" \"-\" | tr \"T\" \"+\")\n\n    IMAGENAME=cellranger_${IDATE}_${SINGULARITY_NAME}\n    mv ${SINGULARITY_NAME} ${IMAGENAME}\n    ln -sf ${IMAGENAME} cellranger.img\n\n\n    # cp -r /opt/conda/envs/jupyternotebook/share/jupyter/kernels   ./\n    cp /opt/patches/scripts/*   ./\n\n\n    ln -sf cellranger cellrangercwl\n    ln -sf cellranger cellrangergetreference\n    ln -sf cellranger cellrangergetdataset\n\n    echo\n    echo \"====================================================================\"\n    echo \"to complete this installation, please type:\"\n    echo\n    echo \"                     source SOURCEME                                \"\n    echo\n    echo \"then, enjoy cellranger !\"\n    echo \"====================================================================\"\n    echo\n\n    # scbatch_notebook\n\n  else\n      echo \"cellranger image called with run and some arguments - did you mean to exec instead ?\"\n  fi\n\n  ####\n",
            "test": "#!/bin/sh\n\n  ####\n\n  # /opt/tests/test\n"
        },
        "type": "container"
    }
}
